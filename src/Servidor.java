
import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Eliezer
 */
public class Servidor extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Servidor
     */
    public Servidor() {
        initComponents();
        Thread mihilo = new Thread(this);
        mihilo.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textinfo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Servidor");

        textinfo.setColumns(20);
        textinfo.setRows(5);
        jScrollPane1.setViewportView(textinfo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(165, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textinfo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        System.out.println("HOLA");
        try {
            //Se crea el socket del servidor especificandole el puerto que debe de abrir
            ServerSocket server = new ServerSocket(8888);
            
            //Objeto en donde vamos a guardar el objeto entrante
            Mensaje mensaje_recibido;
            while (true) {
                //Se pone a aceptar peticiones el servidor
                Socket misocked = server.accept();
                
                /*DataInputStream recibe texto en el servidor, para poder
                recibir Objetos en este servidor se utiliza la clase 
                ObjectInputStream
                */
                
                ObjectInputStream objeto_entrada=new ObjectInputStream(misocked.getInputStream());
                
                //Obtenemos el objeto que a sido capturado
                mensaje_recibido=(Mensaje) objeto_entrada.readObject();
                
                //Se contruye el mensaje
                String informacion="\nUsuario: "+mensaje_recibido.getNomUser()+
                        "Mensaje: "+mensaje_recibido.getMensaje();
                
                textinfo.append(informacion);
                

                //Se crea el flujo de datos de entrada
               // DataInputStream flujo_entrada = new DataInputStream(misocked.getInputStream());

                //Se obtiene lo que viaja a través del flujo de información
               // String informacion = flujo_entrada.readUTF();

                //se manda a poner al área de texto lo que viajó por el flujo de datos.
                //textinfo.append("\n"+informacion);
                
                
                /*El servidor tiene que establecer comunicación con el cliente
                destinatario para enviarle el obejto
                */
                
                Socket comuDestinatario= new Socket(mensaje_recibido.getIpDestino(),8990);
                
                //Se crea el flujo de salida
                ObjectOutputStream salidaDestinatario=new ObjectOutputStream(comuDestinatario.getOutputStream());
                
                salidaDestinatario.writeObject(mensaje_recibido);
                
                salidaDestinatario.close();
                
                //Se cierra la conexión
                comuDestinatario.close();

                //Se cierra la conexion
                misocked.close();
            }

        } catch (IOException ex) {
            System.out.println(ex.getMessage()+" Entre en el primer Catch");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex.getMessage()+" Entre en el segundo Catch");
        }
    }
}
